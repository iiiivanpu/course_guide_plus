{"version":3,"sources":["components/search-bar/serach-bar.js","components/Root.js","serviceWorker.js","index.js"],"names":["ListItem","withStyle","StyledDropdownListItem","paddingTop","paddingBottom","display","alignItems","Container","StyledList","height","VirtualList","React","forwardRef","props","ref","children","Children","toArray","react_default","a","createElement","AutoSizer_default","_ref","width","List_default","role","rowCount","length","rowHeight","rowRenderer","_ref2","index","key","style","Object","assign","item","id","newAllCourseNames","require","name_list","sort","reduce","memo","name","push","console","log","serach_bar","baseui_select","options","labelKey","overrides","Dropdown","component","onChange","event","placeholder","type","TYPE","search","maxDropdownHeight","Root","Boolean","window","location","hostname","match","engine","Styletron","ReactDOM","render","browser_es5_es","value","debug","debugAfterHydration","components_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mr/BAMMA,EAAWC,oBAAUC,yBAAwB,CACjDC,WAAY,EACZC,cAAe,EACfC,QAAS,OACTC,WAAY,WAERC,EAAYN,oBAAUO,aAAY,CAAEC,OAAQ,UAC5CC,EAAcC,IAAMC,WAAW,SAACC,EAAOC,GAC3C,IAAMC,EAAWJ,IAAMK,SAASC,QAAQJ,EAAME,UAC9C,OACEG,EAAAC,EAAAC,cAACb,EAAD,CAAWO,IAAKA,GACdI,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACG,SAAAG,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OACCL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACEM,KAAMZ,EAAMY,KACZhB,OAAQ,IACRc,MAAOA,EACPG,SAAUb,EAAME,SAASY,OACzBC,UAAW,GACXC,YAAa,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,MAAOC,EAAiBF,EAAjBE,IAAKC,EAAYH,EAAZG,MAC1B,OACEf,EAAAC,EAAAC,cAACpB,EAADkC,OAAAC,OAAA,CAAUH,IAAKA,EAAKC,MAAOA,GAAWlB,EAASgB,GAAOlB,OACnDE,EAASgB,GAAOlB,MAAMuB,KAAKC,YAWxCC,EADOC,EAAQ,KACUC,UAAUC,OAAOC,OAAO,SAACC,EAAMC,GAE5D,OADAD,EAAKE,KAAK,CAAER,GAAIO,IACTD,GACN,IACHG,QAAQC,IAAIT,GACG,IAAAU,EAAA,kBACb9B,EAAAC,EAAAC,cAAC6B,EAAA,eAAD,CACEC,QAASZ,EACTa,SAAS,KACTC,UAAW,CAAEC,SAAU,CAAEC,UAAW5C,IACpC6C,SAAU,SAAAC,GAAK,OAAIV,QAAQC,IAAIS,IAC/BC,YAAY,oBACZC,KAAMC,OAAKC,OACXC,kBAAkB,WC7CPC,MAJf,WACE,OAAO5C,EAAAC,EAAAC,cAAC4B,EAAD,OCQWe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECPAC,EAAS,WAAIC,GAEnBC,IAASC,OACPrD,EAAAC,EAAAC,cAACoD,EAAA,SAAD,CAAmBC,MAAOL,EAAQM,WANM,EAMQC,qBAAmB,GACjEzD,EAAAC,EAAAC,cAACwD,EAAD,OAEFC,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2a03d050.chunk.js","sourcesContent":["import React from \"react\";\nimport { withStyle } from \"baseui\";\nimport { StatefulSelect, StyledDropdownListItem, TYPE } from \"baseui/select\";\nimport { StyledList } from \"baseui/menu\";\nimport List from \"react-virtualized/dist/commonjs/List\";\nimport AutoSizer from \"react-virtualized/dist/commonjs/AutoSizer\";\nconst ListItem = withStyle(StyledDropdownListItem, {\n  paddingTop: 0,\n  paddingBottom: 0,\n  display: \"flex\",\n  alignItems: \"center\"\n});\nconst Container = withStyle(StyledList, { height: \"500px\" });\nconst VirtualList = React.forwardRef((props, ref) => {\n  const children = React.Children.toArray(props.children);\n  return (\n    <Container ref={ref}>\n      <AutoSizer>\n        {({ width }) => (\n          <List\n            role={props.role}\n            height={500}\n            width={width}\n            rowCount={props.children.length}\n            rowHeight={36}\n            rowRenderer={({ index, key, style }) => {\n              return (\n                <ListItem key={key} style={style} {...children[index].props}>\n                  {children[index].props.item.id}\n                </ListItem>\n              );\n            }}\n          />\n        )}\n      </AutoSizer>\n    </Container>\n  );\n});\nconst json = require(\"../../constants/all_course_name_list.json\");\nconst newAllCourseNames = json.name_list.sort().reduce((memo, name) => {\n  memo.push({ id: name });\n  return memo;\n}, []);\nconsole.log(newAllCourseNames);\nexport default () => (\n  <StatefulSelect\n    options={newAllCourseNames}\n    labelKey=\"id\"\n    overrides={{ Dropdown: { component: VirtualList } }}\n    onChange={event => console.log(event)}\n    placeholder=\"Choose a class...\"\n    type={TYPE.search}\n    maxDropdownHeight=\"300px\"\n  />\n);\n","import React from \"react\";\nimport SearchBar from \"./search-bar/serach-bar\";\n\nfunction Root() {\n  return <SearchBar />;\n}\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Root from \"./components/Root\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\n\nconst debug =\n  process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine();\n\n// 1. Create a client engine instance\nconst engine = new Styletron();\n\nReactDOM.render(\n  <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n    <Root />\n  </StyletronProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}